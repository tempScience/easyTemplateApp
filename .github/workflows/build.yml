name: macOS, Linux, Windows

# Controls when the action will run. Triggers the workflow on push events
on: [push]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains a single job called "build"
  build:

    #env:
    #  QWE: ${GITHUB_REF#refs/*/}

    # CI skip conditions
    # https://github.com/marketplace/actions/skip-based-on-commit-message
    if: "!contains(github.event.head_commit.message, '[ci skip]')"

    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Build matrix for different platforms
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
        - os: macos-latest
          POETRY_VENV_PATH: /Users/runner/Library/Caches/pypoetry/virtualenvs
          QT_PATH: /Users/runner/Qt
        - os: ubuntu-latest
          POETRY_VENV_PATH: /home/runner/.cache/pypoetry/virtualenvs
          QT_PATH: /home/runner/Qt
        - os: windows-latest
          POETRY_VENV_PATH: C:\Users\runneradmin\AppData\Local\pypoetry\Cache\virtualenvs
          QT_PATH: C:\Qt

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    - name: Declare os-independent env variables
      shell: bash
      run: echo ::set-env name=SHORT_GITHUB_REF::${GITHUB_REF#refs/*/}

    #- name: Declare os-dependent env variables
    #  shell: bash
    #  run: echo ::set-env name=POETRY_VENV_PATH::C:\Users\runneradmin\AppData\Local\pypoetry\Cache\virtualenvs}
    #  if: runner.os == 'Windows'

    - name: Print variables
      run: |
        echo 'SHORT_GITHUB_REF:' $SHORT_GITHUB_REF
        echo 'env.SHORT_GITHUB_REF:' ${{ env.SHORT_GITHUB_REF }}
        echo 'RUNNER_OS:' $RUNNER_OS
        echo 'runner.os:' ${{ runner.os }}
        echo 'MATRIX_OS:' $MATRIX_OS
        echo 'matrix.os:' ${{ matrix.os }}
        echo 'matrix.POETRY_VENV_PATH:' ${{ matrix.POETRY_VENV_PATH }}
        echo 'matrix.QT_PATH:' ${{ matrix.QT_PATH }}

    - name: Check-out the repository
      uses: actions/checkout@v2

    - name: Set up the Python environment
      uses: actions/setup-python@v2
      with:
          python-version: 3.7

    - name: Set up Poetry (Python packages manager)
      uses: Gr1N/setup-poetry@v2

    - name: Cache Poetry
      uses: actions/cache@v2
      with:
        path: |
          ${{ matrix.POETRY_VENV_PATH }}
          ${{ matrix.QT_PATH }}
          .Download
        key: ${{ matrix.os }}-poetry-${{ hashFiles('poetry.lock') }}

    - name: Create venv and install dependences
      run: poetry update

    - name: Print Poetry venv path
      run: poetry env info -p

    #- name: Set up PyInstaller
    #  run: |
    #    poetry add macholib
    #    poetry add pyinstaller
    #- name: Set up PyInstaller (extra)
    #  if: runner.os == 'Windows'
    #  run: |
    #    poetry add pywin32-ctypes
    #    poetry add pefile

    - name: Create freezed python app
      run: poetry run python Tools/Scripts/FreezeApp.py

    #- name: install libxkbcommon-x11-0
    #  run: sudo apt install libxkbcommon-x11-0

    - name: Create app installer
      run: poetry run python Tools/Scripts/MakeInstaller.py

    #- name: Save screenshot
    #  if: runner.os == 'macOS'
    #  run: poetry run easyTemplateApp

    # Runs a single command using the runners shell
    #- name: Remove folder
    #  if: runner.os == 'macOS'
    #  run: rm -rf .Distribution/easyTemplateApp/

    # Creates release zip archive
    #- uses: papeloto/action-zip@v1
    #  with:
    #    files: dist #dist/easyTemplate.app
    #    recursive: true
    #    dest: easyTemplate-${{ runner.os }}-${{ env.SHORT_GITHUB_REF }}.zip
    - name: Create zip of archived artifacts
      run: poetry run python Tools/Scripts/ZipArtifacts.py

    - name: Upload artifacts to GitHub releases
      uses: ncipollo/release-action@v1
      with:
        draft: true
        prerelease: true
        allowUpdates: true
        replacesArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}
        commit: ${{ env.SHORT_GITHUB_REF }}
        tag: ${{ env.SHORT_GITHUB_REF }}
        artifacts: ".Distribution/easyTemplateApp-*.zip"
