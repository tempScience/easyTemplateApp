name: CI

# Controls when the action will run. Triggers the workflow on push events
on: [push]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains a single job called "build"
  build:

    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Sets some env variables
    #env:
    #  SHORT_GITHUB_REF: ${GITHUB_REF#refs/*/}



    # Build matrix for different platforms
    strategy:
      matrix:
    #    os: [macos-latest, windows-latest, ubuntu-latest]
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
        - os: macos-latest
          POETRY_VENV_PATH: ~/.cache/pypoetry/virtualenvs #~/Library/Caches/pypoetry/virtualenvs
        - os: ubuntu-latest
          POETRY_VENV_PATH: ~/.cache/pypoetry/virtualenvs
        - os: windows-latest
          POETRY_VENV_PATH: ~/.cache/pypoetry/virtualenvs

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    # Checks-out the repository under $GITHUB_WORKSPACE, so the job can access it
    - uses: actions/checkout@v2

    # Sets some env variables
    #- uses: franzdiebold/github-env-vars-action@v1.0.0
    #- uses: nelonoel/branch-name@v1

    #- name: Declare some variables
    #  id: vars
    #  run: echo ::set-output name=SHORT_GITHUB_REF::${GITHUB_REF#refs/*/}


    #- name: Set selected color
    #  run: echo '::set-env name=SHORT_GITHUB_REF::develop'

    - uses: actions/github-script@v2
      #id: set-result
      with:
        script: core.exportVariable('SHORT_GITHUB_REF', 'develop')
        result-encoding: string

    - name: Get color
      run: echo 'SHORT_GITHUB_REF:' $SHORT_GITHUB_REF

    #
    #- name: set environment variables
    #  uses: allenevans/set-env@v1.0.0
    #  with:
    #    SHORT_GITHUB_REF2: ${GITHUB_REF#refs/*/}

    #- name: Printenv
    #  run: |
    #    echo "SHORT_GITHUB_REF2=${SHORT_GITHUB_REF2}"
    #    printenv

    # Sets up a Python environment
    - uses: actions/setup-python@v2
      with:
          python-version: 3.7

    - name: Sets some env variables
      shell: python
      run: |
        import os
        os.environ['SHORT_GITHUB_REF'] = os.environ['GITHUB_REF'].split('/')[-1]
        print('GITHUB_REF:', os.environ['GITHUB_REF'])
        print('SHORT_GITHUB_REF:', os.environ['SHORT_GITHUB_REF'])

    - name: Print environment variables
      run: |
        echo $SHORT_GITHUB_REF
        echo ${SHORT_GITHUB_REF}
        echo ${{ env.SHORT_GITHUB_REF }}
#        echo $SHORT_GITHUB_REF
#        echo ${SHORT_GITHUB_REF}
#        echo ${{ env.SHORT_GITHUB_REF }}
#        echo ${{matrix.POETRY_VENV_PATH}}

    # Sets env variables
    #- name: Set env variables
      #run: echo ::set-env name=RELEASE_VERSION::${GITHUB_REF#refs/*/}
    #  run: echo ::set-env name=RELEASE_VERSION::develop

    # Print variables
    #- name: Print variables
    #  run: echo ${{matrix.POETRY_VENV_PATH}}
    #  run: |
    #    echo $RELEASE_VERSION
    #    echo ${{ env.RELEASE_VERSION }}
    #    echo ${{ matrix.os }}
    #    echo ${{ runner.os }}
    #    echo $RUNNER_OS

    # Sets up a Poetry
    - uses: Gr1N/setup-poetry@v2

    # Set up cache
    #- name: Cache Poetry
    #  uses: actions/cache@v2
    #  with:
    #    path: ~/.cache/pypoetry/virtualenvs
    #    key: poetry-${{ matrix.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('poetry.lock') }}
    - uses: actions/cache@v1
      with:
        path: ${{matrix.POETRY_VENV_PATH}}
        key: ${{ matrix.os }}-poetry-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          ${{ matrix.os }}-poetry-

    # Runs a single command using the runners shell
    - name: Create venv and install dependences
      run: poetry update

    # Runs a set of commands using the runners shell
    - name: Set up PyInstaller
      run: |
        poetry add macholib
        poetry add pyinstaller
    - name: Set up PyInstaller (extra)
      if: runner.os == 'Windows'
      run: |
        poetry add pywin32-ctypes
        poetry add pefile

    # Runs a single command using the runners shell
    - name: Freeze python app
      run: poetry run python Tools/Scripts/FreezeApp.py

    # Runs a single command using the runners shell
    #- name: Remove folder
    #  run: rm -rf dist/easyTemplate/

    # Creates release zip archive
    - uses: papeloto/action-zip@v1
      with:
        files: dist #dist/easyTemplate.app
        recursive: true
        dest: easyTemplate-${{ runner.os }}-${{ env.SHORT_GITHUB_REF }}.zip

    # Creates GitHub Releases
    - name: Upload artifacts to GitHub releases
      uses: ncipollo/release-action@v1
      with:
        draft: true
        prerelease: true
        allowUpdates: true
        replacesArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}
        commit: ${{ env.SHORT_GITHUB_REF }} #${{ env.RELEASE_VERSION }}
        tag: ${{ env.SHORT_GITHUB_REF }} #${{ env.RELEASE_VERSION }}
        artifacts: "easyTemplate-*.zip"
