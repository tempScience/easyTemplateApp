name: CI

# Controls when the action will run. Triggers the workflow on push events
on: [push]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  
  # This workflow contains a single job called "build"
  build:
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
    # Checks-out the repository under $GITHUB_WORKSPACE, so the job can access it
    - uses: actions/checkout@v2
    
    # Sets up a Python environment
    #- uses: actions/setup-python@v2
    #  with:
    #      python-version: 3.7

    # Sets up a Poetry
    #- uses: Gr1N/setup-poetry@v2

    # Runs a set of commands using the runners shell
    #- name: Shows versions
    #  run: |
    #    python --version
    #    pip --version
    #    poetry --version

    # Runs a single command using the runners shell
    #- name: Creates venv and install dependences
    #  run: poetry update

    # Runs a set of commands using the runners shell
    #- name: Sets up PyInstaller
    #  run: |
    #    poetry add macholib
    #    poetry add pyinstaller

    # Runs a single command using the runners shell
    #- name: Freezes python app
    #  run: poetry run pyinstaller easyTemplate/main.py --name easyTemplate --noconfirm --clean --windowed --onedir
    
    # Creates release zip archive
    #- uses: montudor/action-zip@v0.1.0
    #  with:
    #    args: zip -qq -r ./easyTemplate.zip ./dist/easyTemplate.app
    
    # Creates GitHub Releases 
    #- name: Upload artifacts to GitHub releases
    #  uses: softprops/action-gh-release@v1
    #  with:
    #    draft: true
    #    prerelease: true
    #    files: pyproject.toml #easyTemplate.zip
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

    # Creates GitHub Releases 
    #- name: Upload artifacts to GitHub releases
    #  uses: ncipollo/release-action@v1
    #  with:
    #    draft: true
    #    prerelease: true
    #    allowUpdates: true
    #    commit: commit
    #    tag: tag
    #    artifacts: "pyproject.toml" #easyTemplate.zip
    #    token: ${{ secrets.GITHUB_TOKEN }}      

    # Creates GitHub Releases 
    #- name: Upload artifacts to GitHub releases
    #  uses: docker://antonyurchenko/git-release:latest
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #    DRAFT_RELEASE: "true"
    #    PRE_RELEASE: "true"
    #  with:
    #    args: "pyproject.toml" #easyTemplate.zip

    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v2.x

    - name: Print slug/short variables
      run: |
        echo "Slug variables"
        echo " - ${{ env.GITHUB_REF_SLUG }}"

    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ env.GITHUB_REF_SLUG }}
        release_name: ${{ env.GITHUB_REF_SLUG }}
        body: |
          - New Change
          - Second Change
        draft: true
        prerelease: true
